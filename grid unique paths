// brute force
class Solution {
public:

    int count(int r , int c , int m , int n){
        if(r==m-1 && c==n-1)    return 1;
         if(r>=m || c>=n) return 0;
        int left=0 , right=0;
        left = count(r+1 , c , m , n);
        right = count(r , c+1 , m , n);
        return left+right;
    }

    int uniquePaths(int m, int n) {
        int res= count(0,0,m,n);
        return res;
    }
};

//DP
class Solution {
public:

    int count(int r , int c , int m , int n, vector<vector<int>>&dp){
        if(r==m-1 && c==n-1)    return 1;
        if(r>=m || c>=n) return 0;
        int left=0 , right=0;
        if(dp[r][c]!=-1)
        return dp[r][c];
        else return dp[r][c]=count(r+1 , c , m , n, dp)+count(r , c+1 , m , n, dp);
        
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,-1));
        int res= count(0,0,m,n,dp);
        return res;
    }
};
